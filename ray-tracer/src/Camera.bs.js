// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Ray$RayTracer = require("./Ray.bs.js");
var Vec3$RayTracer = require("./Vec3.bs.js");

function randomVectorInUnitDisk(param) {
  var randomVector = function (param) {
    return Vec3$RayTracer.sub(Vec3$RayTracer.mul(Vec3$RayTracer.make(Math.random(), Math.random(), Math.random()), 2.0), Vec3$RayTracer.make(1.0, 1.0, 0.0));
  };
  var p = randomVector(/* () */0);
  while(Vec3$RayTracer.dot(p, p) >= 1.0) {
    p = randomVector(/* () */0);
  };
  return p;
}

function make(lookFrom, lookAt, vUp, vFov, aspect, aperture, focusDistance) {
  var lensRadius = aperture / 2.0;
  var theta = vFov * Math.PI / 180.0;
  var halfHeight = Math.tan(theta / 2.0);
  var halfWidth = aspect * halfHeight;
  var w = Vec3$RayTracer.unitVector(Vec3$RayTracer.sub(lookFrom, lookAt));
  var u = Vec3$RayTracer.unitVector(Vec3$RayTracer.cross(vUp, w));
  var v = Vec3$RayTracer.cross(w, u);
  var lowerLeftCorner = Vec3$RayTracer.sub(Vec3$RayTracer.sub(Vec3$RayTracer.sub(lookFrom, Vec3$RayTracer.mul(u, halfWidth * focusDistance)), Vec3$RayTracer.mul(v, halfHeight * focusDistance)), Vec3$RayTracer.mul(w, focusDistance));
  var horizontal = Vec3$RayTracer.mul(u, 2.0 * halfWidth * focusDistance);
  var vertical = Vec3$RayTracer.mul(v, 2.0 * halfHeight * focusDistance);
  return /* record */[
          /* lowerLeftCorner */lowerLeftCorner,
          /* horizontal */horizontal,
          /* vertical */vertical,
          /* origin */lookFrom,
          /* u */u,
          /* v */v,
          /* lensRadius */lensRadius
        ];
}

function getRay(camera, s, t) {
  var rd = Vec3$RayTracer.mul(randomVectorInUnitDisk(/* () */0), camera[/* lensRadius */6]);
  var offset = Vec3$RayTracer.add(Vec3$RayTracer.mul(camera[/* u */4], rd[/* x */0]), Vec3$RayTracer.mul(camera[/* v */5], rd[/* y */1]));
  var rayDirection = Vec3$RayTracer.sub(Vec3$RayTracer.sub(Vec3$RayTracer.add(Vec3$RayTracer.add(camera[/* lowerLeftCorner */0], Vec3$RayTracer.mul(camera[/* horizontal */1], s)), Vec3$RayTracer.mul(camera[/* vertical */2], t)), camera[/* origin */3]), offset);
  return Ray$RayTracer.make(Vec3$RayTracer.add(camera[/* origin */3], offset), rayDirection);
}

exports.randomVectorInUnitDisk = randomVectorInUnitDisk;
exports.make = make;
exports.getRay = getRay;
/* No side effect */
