// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var Vec3$RayTracer = require("./Vec3.bs.js");
var World$RayTracer = require("./World.bs.js");
var Camera$RayTracer = require("./Camera.bs.js");
var DomUtils$RayTracer = require("./DomUtils.bs.js");
var MetalMaterial$RayTracer = require("./MetalMaterial.bs.js");
var LambertianMaterial$RayTracer = require("./LambertianMaterial.bs.js");

var canvas = document.getElementById("demo");

var ctx = canvas.getContext("2d");

var width = canvas.width;

var height = canvas.height;

function backgroundColor(ray) {
  var unitDirection = Vec3$RayTracer.unitVector(ray[/* direction */1]);
  var t = (unitDirection[/* y */1] + 1.0) * 0.5;
  return Vec3$RayTracer.add(Vec3$RayTracer.mul(Vec3$RayTracer.make(1.0, 1.0, 1.0), 1.0 - t), Vec3$RayTracer.mul(Vec3$RayTracer.make(0.5, 0.7, 1.0), t));
}

function color(ray, world, depth) {
  var hitRecordOption = World$RayTracer.hit(world, ray, 0.001, Number.MAX_VALUE);
  if (hitRecordOption !== undefined) {
    var hitRecord = hitRecordOption;
    if (depth < 50) {
      var match = hitRecord[/* material */3];
      var result;
      result = match.tag ? MetalMaterial$RayTracer.scatter(ray, hitRecord[/* normal */2], hitRecord[/* p */1], match[0], match[1]) : LambertianMaterial$RayTracer.scatter(ray, hitRecord[/* normal */2], hitRecord[/* p */1], match[0]);
      if (result !== undefined) {
        var match$1 = result;
        return Vec3$RayTracer.mulVector(match$1[0], color(match$1[1], world, depth + 1 | 0));
      } else {
        return Vec3$RayTracer.make(0.0, 0.0, 0.0);
      }
    } else {
      return Vec3$RayTracer.make(0.0, 0.0, 0.0);
    }
  } else {
    return backgroundColor(ray);
  }
}

var world = World$RayTracer.make(/* () */0);

var lookFrom = Vec3$RayTracer.make(13.0, 2.0, 3.0);

var lookAt = Vec3$RayTracer.make(0.0, 0.0, 0.0);

var camera = Camera$RayTracer.make(lookFrom, lookAt, Vec3$RayTracer.make(0.0, 1.0, 0.0), 20.0, width / height, 0.1, 10.0);

for(var y = height - 1 | 0; y >= 0; --y){
  for(var x = 0 ,x_finish = width - 1 | 0; x <= x_finish; ++x){
    var col = Vec3$RayTracer.make(0.0, 0.0, 0.0);
    for(var _for = 0; _for <= 24; ++_for){
      var u = (x + Math.random()) / width;
      var v = (y + Math.random()) / height;
      var ray = Camera$RayTracer.getRay(camera, u, v);
      col = Vec3$RayTracer.add(col, color(ray, world, 0));
    }
    col = Vec3$RayTracer.div(col, 25);
    col = Vec3$RayTracer.make(Math.sqrt(col[/* x */0]), Math.sqrt(col[/* y */1]), Math.sqrt(col[/* z */2]));
    var ir = 255.99 * col[/* x */0] | 0;
    var ig = 255.99 * col[/* y */1] | 0;
    var ib = 255.99 * col[/* z */2] | 0;
    DomUtils$RayTracer.Context[/* drawPixel */1](ctx, x, height - y | 0, ir, ig, ib);
  }
}

var distToFocus = 10.0;

var aperture = 0.1;

var numSamples = 25;

exports.canvas = canvas;
exports.ctx = ctx;
exports.width = width;
exports.height = height;
exports.backgroundColor = backgroundColor;
exports.color = color;
exports.world = world;
exports.lookFrom = lookFrom;
exports.lookAt = lookAt;
exports.distToFocus = distToFocus;
exports.aperture = aperture;
exports.camera = camera;
exports.numSamples = numSamples;
/* canvas Not a pure module */
